# -----------------------------------------------------------------------------
# Cargamos librerias necesarias
# -----------------------------------------------------------------------------
# Instalamos SummarizedExperiment 
if (!requireNamespace("BiocManager", quietly = TRUE)) {
  install.packages("BiocManager")
}
if (!require("SummarizedExperiment", character.only = TRUE)) {
  BiocManager::install("SummarizedExperiment")
}

library(readr) #Para leer lso archivos
library(dplyr)  #Para manipulación de datos
library(SummarizedExperiment)  #Para trabajar con objetos SummarizedExperiment
library(knitr) #Para las tablas

# -----------------------------------------------------------------------------
# 1. Importamos los datos
# -----------------------------------------------------------------------------
preprocessed_data <- read_delim("https://raw.githubusercontent.com/Ivanovna66/Hermanova-Ivana-1/be4c57d1021328f6922f928204064433aa0fdc91/Datos/preprocessed_data.txt",
                                delim = "\t", 
                                escape_double = FALSE, 
                                trim_ws = TRUE)

metabolite_annotations <- read_delim("https://raw.githubusercontent.com/Ivanovna66/Hermanova-Ivana-1/be4c57d1021328f6922f928204064433aa0fdc91/Datos/metabolite_annotations.txt",
                                     delim = "\t", 
                                     escape_double = FALSE, 
                                     trim_ws = TRUE)

clinical_annotations <- read_delim("https://raw.githubusercontent.com/Ivanovna66/Hermanova-Ivana-1/be4c57d1021328f6922f928204064433aa0fdc91/Datos/clinical_annotations.txt",
                                   delim = "\t", 
                                   escape_double = FALSE, 
                                   trim_ws = TRUE)

# -----------------------------------------------------------------------------
# 2. Preparamos los datos para crear el objeto SummarizedExperiment (SE)
# -----------------------------------------------------------------------------
# 2.1. Creamos la matriz de datos (assay)
# Extraemos las mediciones (todas las columnas excepto CLIENT_SAMPLE_ID) y las convertimos a matriz
assay_data <- preprocessed_data %>% select(-CLIENT_SAMPLE_ID) %>% as.matrix()

# Obtenemos los nombres de los metabolitos (columnas, excepto CLIENT_SAMPLE_ID
metabolite_names <- colnames(preprocessed_data)[-1]

# Transponemos la matriz para que:
# - Las filas sean los metabolitos
# - Las columnas sean las muestras (identificadas por CLIENT_SAMPLE_ID)
assay_matrix <- t(assay_data)
rownames(assay_matrix) <- metabolite_names
colnames(assay_matrix) <- preprocessed_data$CLIENT_SAMPLE_ID

# 2.2. Preparamos los metadatos de los features (rowData)
# Creamos un data frame con todos los metabolitos
row_metadata <- metabolite_annotations %>% 
  filter(CHEMICAL_NAME %in% metabolite_names) %>% 
  arrange(match(CHEMICAL_NAME, metabolite_names)) %>% 
  as.data.frame()

# 2.3. Preparamos los metadatos de las muestras (colData)
# Filtramos la metadata clínica para guardar solo las muestras que estan en preprocessed_data
col_metadata <- clinical_annotations %>% 
  filter(SAMPLE_ID %in% preprocessed_data$CLIENT_SAMPLE_ID) %>% 
  arrange(match(SAMPLE_ID, preprocessed_data$CLIENT_SAMPLE_ID)) %>% 
  as.data.frame()
rownames(col_metadata) <- col_metadata$SAMPLE_ID

# 2.4. Comprobamos las dimensiones
dim(assay_matrix)
dim(row_metadata)
dim(col_metadata)

# -----------------------------------------------------------------------------
# 3. Creamos el objeto SummarizedExperiment
# -----------------------------------------------------------------------------
se <- SummarizedExperiment(
  assays = list(counts = assay_matrix),
  rowData = row_metadata,
  colData = col_metadata
)

# Revisamos la estructura de SE
print(dim(se))            # Dimensiones: numero de metabolitos  y pacientes
print(assayNames(se))     # Nombre del assay
head(rownames(se))        # Los primeros nombres de los metabolitos
head(colnames(se))        # Los primeros ID de las muestras

# Guardamos el objeto SE
save(se, file = "se.Rda")

# -----------------------------------------------------------------------------
# 4. Creamos la tabla con datos informativos sobre el objeto SE
# -----------------------------------------------------------------------------
summary_se <- data.frame(
  Propiedad = c("Clase", "Dimensiones", "Numero de assays", "Nombres de assays",
                "Numero de variables en rowData", "Numero de variables en colData"),
  Valor = c(
    class(se)[1],
    paste(dim(se), collapse = " x "),
    length(assayNames(se)),
    paste(assayNames(se), collapse = ", "),
    length(colnames(rowData(se))),
    length(colnames(colData(se)))
  ),
  stringsAsFactors = FALSE
)

# Mostramos la tabla
kable(summary_se, caption = "Resumen del objeto SummarizedExperiment")

# -----------------------------------------------------------------------------
# 5. Ejemplos de exploracion
# -----------------------------------------------------------------------------

# 5.1 PCA
# Extraemos la matriz de datos
data_matrix <- assay(se, "counts")

# Realizamos el PCA 
pca_result <- prcomp(t(data_matrix), scale. = TRUE)

# Grafica
plot(pca_result$x[, 1], pca_result$x[, 2],
     xlab = "PC1", ylab = "PC2",
     main = "PCA",
     pch = 19, col = "steelblue")

# PCA por Diagnosis
groups <- as.factor(colData(se)$Diagnosis)
plot(pca_result$x[, 1], pca_result$x[, 2],
     xlab = "PC1", ylab = "PC2",
     main = "PCA por Diagnosis",
     pch = 19, col = groups)
legend("topright", legend = levels(groups),
       col = 1:length(levels(groups)), pch = 19)


# 5.2 Analisis de la distribucion de pacientes por diagnostico
# Numero de pacientes que desarrollaron cáncer de próstata
diagnosis <- colData(se)$Diagnosis
patients_table <- table(diagnosis)

# Numero de pacientes que desarrollaron cáncer de próstata metastatico
metastases <- with(colData(se), (BoneScanResults.fu1case == 2) | (BoneScanResults.fu2case == 2))

# Numero total de pacientes que desarrollaron cancer de prostata metastatico
total_metastases <- sum(metastases, na.rm = TRUE)
total_metastases

# Creamos un data frame con los resultados
result_table <- data.frame(
  Cancer = c("No", "Si"),
  Pacientes = c(as.numeric(patients_table["0"]), as.numeric(patients_table["1"])),
  Metastasis = c(0, total_metastases)
)
# Mostramos la tabla 
kable(result_table, caption = "Numero de casos con cancer de prostata")

# 5.3 Analisis del valor pronostico de las poliaminas
# Filtramos rowData del objeto se para obtener solo las filas con SUB_PATHWAY "Polyamine Metabolism"
polyamine_annotations <- rowData(se) %>% 
  as.data.frame() %>% 
  filter(SUB_PATHWAY == "Polyamine Metabolism")

# Extraer los nombres de los metabolitos, asumiendo que la columna con los nombres es CHEMICAL_NAME
polyamine_names <- polyamine_annotations$CHEMICAL_NAME

# Crear tabla de poliaminas
polyamine_table <- data.frame(Poliamina = polyamine_names)
kable(polyamine_table, caption = "Nombres de Poliaminas")

# Filtramos el objeto SE para guardar solo los metabolitos de pathway "Polyamine Metabolism"
se_polyamine <- se[ !is.na(rowData(se)$SUB_PATHWAY) & 
                      rowData(se)$SUB_PATHWAY == "Polyamine Metabolism", ]

# Calculamos la media de las intensidades en cada muestra para los metabolitos del pathway "Polyamine Metabolism"
polyamine_means <- colMeans(assay(se_polyamine, "counts"))

# Calculamos las medias de polyamine_means para cada grupo de diagnóstico
group_means <- tapply(polyamine_means, diagnosis, mean, na.rm = TRUE)
print(group_means)

# Wilcoxon test para comparar los grupos
wilcox_result <- wilcox.test(polyamine_means ~ diagnosis)
print(wilcox_result)

# Boxplot para visualizar el resultado
boxplot(polyamine_means ~ diagnosis,
        main = "Poliaminas ",
        xlab = "Cancer de prostata (0 = No, 1 = Si)",
        ylab = "Nivel Promedio",
        col = c("grey", "lightblue"))
